* Multitasking refers to a computer's ability to perform multiple jobs concurrently
	more than one program running concurrently Ex: UNIX
	
* A thread is a single sequence of execution within a program

* Multi-threading refers to multiple threads of control within a single program
	each program can run multiple threads of control within it
	
* Concurrency v/s Parallelism
	-> CPU allocates via priority. So full capacity of CPU is utilized for processes in a priority order
	-> If we have two CPUs and two processes, then we can run them independently. This is parallelism.
	
* Threads and Process: 
	CPU can run different processes. 
	An executing instance of a program is called a PROCESS. 
		Ex: Video playing, Chrome, PDF viewing (All at same time)
	A thread is a subset of the process.
		Ex: Chrome is a process, then its tabs are threads.
	Threads share the address space of the process that created it; processes have their own address space.
	
Why threads?	
	-> To maintain responsiveness of an application during a long running task.
	-> To enable cancellation of separable tasks.
	-> Some problems are intrinsically parallel.
	-> To monitoe status of some resource (DB).
	-> SOme APIs and system demand it: Swing
	
* Application Thread:
	When we execute an application
		-> the JVM creates a thread object whose task is defined by the main() method & it starts the thread.
		-> The thread executes the statements of the program one by one until the method returns and the thread dies.

* Multiple Threads in an application:
	-> Each thread has its own private run-time stack
	-> If two threads execute the same method, each will have its own copy of the local variables the methods use.
	-> All threads see the same dynamic memory (heap).
	-> Two different threads can act on the same object and same static fields concurrently.
	
* Creating threads:
	1. Subclassing the Thread class and instantiating a new object of that class.
	2. Implementing the Runnable interface.
		In both cases the run() method should be implemented.
	
	
	 