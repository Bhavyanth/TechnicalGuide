<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<!-- To activate the annotation in the spring framework -->
	<context:annotation-config />
	<bean id="studentbean" class="com.pojo.Student">
		<property name="name" value="Vimal Jaiswal"></property>
	</bean>

	<!-- Constructor injection -->
	<!-- primitive and String-based values -->

	<bean id="emp1" class="com.pojo.Employee">
		<constructor-arg value="10" type="int"></constructor-arg>
	</bean>

	<!-- If you don't specify the type attribute in the constructor-arg element, 
		by default string type constructor will be invoked -->
	<bean id="emp4" class="com.pojo.Employee">
		<constructor-arg value="10"></constructor-arg>
	</bean>

	<bean id="emp2" class="com.pojo.Employee">
		<constructor-arg value="adithya"></constructor-arg>
	</bean>

	<bean id="emp3" class="com.pojo.Employee">
		<constructor-arg value="10" type="int"></constructor-arg>
		<constructor-arg value="adithya"></constructor-arg>
	</bean>

	<!-- Constructor Injection with Dependent Object -->

	<bean id="add1" class="com.pojo.Address">
		<constructor-arg value="Shadnagar"></constructor-arg>
		<constructor-arg value="Telangana"></constructor-arg>
		<constructor-arg value="India"></constructor-arg>
	</bean>

	<bean id="emp5" class="com.pojo.Employee">
		<constructor-arg value="12" type="int"></constructor-arg>
		<constructor-arg>
			<ref bean="add1" />
		</constructor-arg>
	</bean>


	<!-- Constructor Injection with Collection Example -->
	<bean id="q1" class="com.pojo.Question">
		<constructor-arg value="111"></constructor-arg>
		<constructor-arg value="What is java?"></constructor-arg>
		<constructor-arg>
			<list>
				<value>Java is a programming language</value>
				<value>Java is a Platform</value>
				<value>Java is an Island of Indonasia</value>
			</list>
		</constructor-arg>
	</bean>

	<!-- Constructor Injection with Non-String Collection (having Dependent 
		Object) -->


	<bean id="ans1" class="com.pojo.Answer">
		<constructor-arg value="1"></constructor-arg>
		<constructor-arg
			value="Java is a programming language"></constructor-arg>
		<constructor-arg value="John"></constructor-arg>
	</bean>

	<bean id="ans2" class="com.pojo.Answer">
		<constructor-arg value="2"></constructor-arg>
		<constructor-arg value="Java is a Platform"></constructor-arg>
		<constructor-arg value="Ravi"></constructor-arg>
	</bean>

	<bean id="q2" class="com.pojo.Question">
		<constructor-arg value="What is java?"></constructor-arg>
		<constructor-arg>
			<list>
				<ref bean="ans1" />
				<ref bean="ans2" />
			</list>
		</constructor-arg>
	</bean>

	<!-- Constructor Injection with Map Example -->
	<bean id="q3" class="com.pojo.Question">
		<constructor-arg value="11"></constructor-arg>
		<constructor-arg value="What is Java?"></constructor-arg>
		<constructor-arg>
			<map>
				<entry key="Java is a Programming Language" value="Ajay Kumar"></entry>
				<entry key="Java is a Platform" value="John Smith"></entry>
				<entry key="Java is an Island" value="Raj Kumar"></entry>
			</map>
		</constructor-arg>
	</bean>


	<!-- Constructor Injection with Non-String Map (having dependent Object) -->

	<bean id="ans3" class="com.pojo.Answer">
		<constructor-arg value="1"></constructor-arg>
		<constructor-arg
			value="Java is a Programming Language"></constructor-arg>
		<constructor-arg value="12/12/2001"></constructor-arg>
	</bean>
	<bean id="ans4" class="com.pojo.Answer">
		<constructor-arg value="2"></constructor-arg>
		<constructor-arg value="Java is a Platform"></constructor-arg>
		<constructor-arg value="12/12/2003"></constructor-arg>
	</bean>

	<bean id="user1" class="com.pojo.User">
		<constructor-arg value="1"></constructor-arg>
		<constructor-arg value="Arun Kumar"></constructor-arg>
		<constructor-arg value="arun@gmail.com"></constructor-arg>
	</bean>
	<bean id="user2" class="com.pojo.User">
		<constructor-arg value="2"></constructor-arg>
		<constructor-arg value="Varun Kumar"></constructor-arg>
		<constructor-arg value="Varun@gmail.com"></constructor-arg>
	</bean>

	<bean id="q4" class="com.pojo.Question">
		<constructor-arg value="What is Java?"></constructor-arg>
		<constructor-arg>
			<map>
				<entry key-ref="ans1" value-ref="user1"></entry>
				<entry key-ref="ans2" value-ref="user2"></entry>
			</map>
		</constructor-arg>
	</bean>



	<!-- Inheriting Bean in Spring -->
	<bean id="emp6" class="com.pojo.Employee">
		<constructor-arg value="10" type="int"></constructor-arg>

	</bean>

	<bean id="emp7" class="com.pojo.Employee" parent="emp6">
		<constructor-arg value="adithya"></constructor-arg>
		<constructor-arg value="adithyamail"></constructor-arg>
	</bean>



	<!-- Dependency Injection by setter method -->
	<bean id="emps1" class="com.pojo.Employee">
		<property name="id">
			<value>20</value>
		</property>
		<property name="name">
			<value>Arun</value>
		</property>
		<property name="email">
			<value>adithyaemail</value>
		</property>

	</bean>

	<!-- Setter Injection with Dependent Object Example -->

	<bean id="addresss1" class="com.pojo.Address">
		<property name="city" value="Ghaziabad"></property>
		<property name="state" value="UP"></property>
		<property name="country" value="India"></property>
	</bean>

	<bean id="emps2" class="com.pojo.Employee">
		<property name="id" value="1"></property>
		<property name="name" value="Sachin Yadav"></property>
		<property name="email" value="Sachin Yadavemail"></property>
		<property name="address" ref="addresss1"></property>
	</bean>

	<!-- Setter Injection with Collection Example -->

	<bean id="qs1" class="com.pojo.Question">
		<property name="id" value="1"></property>
		<property name="name" value="What is Java?"></property>
		<property name="answers">
			<list>
				<value>Java is a programming language</value>
				<value>Java is a platform</value>
				<value>Java is an Island</value>
			</list>
		</property>
	</bean>


	<!-- Setter Injection with Non-String Collection (having Dependent Object) -->

	<bean id="anss1" class="com.pojo.Answer">
		<property name="id" value="1"></property>
		<property name="name" value="Java is a programming language"></property>
		<property name="by" value="Ravi Malik"></property>
	</bean>
	<bean id="anss2" class="com.pojo.Answer">
		<property name="id" value="2"></property>
		<property name="name" value="Java is a platform"></property>
		<property name="by" value="Sachin"></property>
	</bean>

	<bean id="qs2" class="com.pojo.Question">
		<property name="id" value="1"></property>
		<property name="name" value="What is Java?"></property>
		<property name="answerobj">
			<list>
				<ref bean="anss1" />
				<ref bean="anss2" />
			</list>
		</property>
	</bean>


	<!-- Setter Injection with Map -->
	<bean id="qs3" class="com.pojo.Question">
		<property name="id" value="1"></property>
		<property name="name" value="What is Java?"></property>
		<property name="answersMap">
			<map>
				<entry key="Java is a programming language"
					value="Sonoo Jaiswal"></entry>
				<entry key="Java is a Platform" value="Sachin Yadav"></entry>
			</map>
		</property>
	</bean>


	<!-- Setter Injection with Non-String Map (having dependent Object) -->
	<bean id="anss3" class="com.pojo.Answer">
		<property name="id" value="1"></property>
		<property name="name" value="Java is a Programming Language"></property>
		<property name="by" value="12/12/2001"></property>
	</bean>
	<bean id="anss4" class="com.pojo.Answer">
		<property name="id" value="2"></property>
		<property name="name" value="Java is a Platform"></property>
		<property name="by" value="12/12/2003"></property>
	</bean>

	<bean id="users1" class="com.pojo.User">
		<constructor-arg value="1"></constructor-arg>
		<constructor-arg value="Arun Kumar"></constructor-arg>
		<constructor-arg value="arun@gmail.com"></constructor-arg>
	</bean>
	<bean id="users2" class="com.pojo.User">
		<constructor-arg value="2"></constructor-arg>
		<constructor-arg value="Varun Kumar"></constructor-arg>
		<constructor-arg value="Varun@gmail.com"></constructor-arg>
	</bean>

	<bean id="qs4" class="com.pojo.Question" init-method="initBean"
		destroy-method="destroyBean">
		<property name="id" value="1"></property>
		<property name="name" value="What is Java?"></property>
		<property name="answersMapobj">
			<map>
				<entry key-ref="anss3" value-ref="users1"></entry>
				<entry key-ref="anss4" value-ref="users2"></entry>
			</map>
		</property>
	</bean>

	<bean id="customBeanPostProcessor"
		class="com.cocepts.CustomBeanPostProcessor" />

	<!-- byName autowiring mode -->
	<bean id="b" class="com.pojo.AutowiringA"></bean>
	<bean id="a" class="com.pojo.AutowiringB" autowire="byName"></bean>


	<!-- byType autowiring mode -->

	<!-- <bean id="b1" class="com.pojo.AutowiringA"></bean> -->
	<bean id="a1" class="com.pojo.AutowiringB" autowire="byType"></bean>


	<!-- No Autowire mode -->

	<bean id="a2" class="com.pojo.AutowiringB" autowire="no"></bean>


	<!-- Factory method -->
	<bean id="af" class="com.cocepts.factorymethod.A"
		factory-method="getA"></bean>

	<!-- static factorymethod -->
	<bean id="p" class="com.cocepts.factorymethod.PrintableFactory"
		factory-method="getPrintable"></bean>


	<!-- Non static factorymethod -->
	<bean id="pfactory"
		class="com.cocepts.factorymethod.PrintableFactory"></bean>
	<!-- if we dont add factory-bean then we will face below issue No matching 
		factory method found: factory method 'getPrintableObj()'. Check that a method 
		with the specified name exists and that it is static. -->
	<bean id="pns" class="com.cocepts.factorymethod.PrintableFactory"
		factory-method="getPrintableObj" factory-bean="pfactory"></bean>



	<!-- @Resource -->
	<bean id="mycompany" class="com.pojo.Company">
		<property name="name" value="Test Pvt. Ltd." />
		<property name="location" value="India" />
	</bean>

	<bean id="myemployee" class="com.pojo.EmployeeResource">
		<property name="id" value="123456" />
		<property name="name" value="Charlotte O' Neil" />
	</bean>



	<!-- database configuration -->

	<bean id="ds"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost:3306/hibernate?characterEncoding=latin1" />
		<property name="username" value="root" />
		<property name="password" value="admin" />
	</bean>

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="ds"></property>
	</bean>

	<bean id="userdao" class="com.dao.UserDao">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
	</bean>


	<!-- namedjdbctemplate -->
	<bean id="namedTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="ds"></constructor-arg>
		</bean>
		
		<bean id="userdaonamedtemplate" class="com.dao.UserDao">
		<property name="namedTemplate" ref="namedTemplate"></property>
	</bean>
	
	
	
	
	
	<!-- Hibernate Integration -->
	
	<!-- <bean id="mysessionFactory"  class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">  
        <property name="dataSource" ref="ds"></property>  
          
        <property name="mappingResources">  
        <list>  
        <value>employee.hbm.xml</value>  
        </list>  
        </property>  
          
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
                <prop key="hibernate.show_sql">true</prop>  
                  
            </props>  
        </property>  
    </bean>  
    
    <bean id="hibernatetemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">  
    <property name="sessionFactory" ref="mysessionFactory"></property>  
    </bean> 
    
     <bean id="hiebrnatedao" class="com.dao.HibernateDao">  
    <property name="template" ref="hibernatetemplate"></property>  
    </bean>  -->
		
		
		
</beans>  